{"version":3,"sources":["utils/api/index.js","components/common/NavBar.js","components/home/CreateDeck.js","components/common/ErrorMessage.js","components/common/LoadingMessage.js","components/deck/cards/CreateCard.js","components/deck/cards/EditCard.js","components/common/NotFound.js","components/deck/cards/index.js","components/common/buttons/EditBtn.js","components/common/buttons/DeleteBtn.js","components/deck/view/CardListItem.js","components/common/buttons/CreateBtn.js","components/common/buttons/StudyBtn.js","components/deck/view/CardList.js","components/deck/EditDeck.js","components/deck/study/LowCards.js","components/deck/study/StudyCard.js","components/deck/study/StudyDeck.js","components/deck/index.js","components/common/buttons/ViewBtn.js","components/home/DeckListItem.js","components/home/DeckList.js","components/common/Header.js","components/home/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","card","Number","cardId","updatedCard","append","NavBar","navTitles","list","map","title","index","length","className","to","CreateDeck","useState","description","formData","setFormData","history","useHistory","handleChange","target","value","onSubmit","event","preventDefault","createDeck","then","newDeck","push","catch","htmlFor","type","placeholder","onChange","onClick","ErrorMessage","children","style","color","message","LoadingMessage","CreateCard","initialFormState","front","back","setDeck","undefined","setError","useEffect","controller","AbortController","abort","createCard","EditCard","useParams","readCard","updateCard","NotFound","CardCommands","useRouteMatch","path","EditBtn","width","DeleteBtn","window","confirm","deleteDeck","deleteCard","go","CardListItem","CreateBtn","StudyBtn","ViewDeck","setCards","currentDeck","cardList","EditDeck","LowCards","numCards","StudyCard","initialState","flipped","viewed","session","setSession","StudyDeck","DeckCommands","params","exact","ViewBtn","DeckListItem","DeckList","decks","setDecks","listDecks","Header","Home","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAIMA,EAAeC,iJAAYD,cAAgB,wBAK3CE,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OADA,YAAuCD,EAAvC,G,SAoBaE,E,kFAAf,WAAyBC,EAAKC,EAASC,GAAvC,eAAAC,EAAA,+EAE2BC,MAAMJ,EAAKC,GAFtC,aAEUI,EAFV,QAIiBC,OAAS,KAAOD,EAASC,OAAS,KAJnD,sBAKY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aALvD,UAQ4B,MAApBH,EAASC,OARjB,yCASa,MATb,wBAYiBD,EAASI,OAZ1B,8EAeuB,eAAf,KAAMC,KAfd,uBAgBMC,QAAQC,MAAM,KAAMC,OAhB1B,sCAmBWC,QAAQC,QAAQb,IAnB3B,2D,kEA4BO,WAAyBc,GAAzB,eAAAb,EAAA,6DACCH,EADD,UACUR,EADV,gCAEQO,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,kEAeA,WAA0BnB,EAAMmB,GAAhC,iBAAAb,EAAA,6DACCH,EADD,UACUR,EADV,UAECS,EAAU,CACdgB,OAAQ,OACRvB,UACAwB,KAAMC,KAAKC,UAAUxB,EAAWC,IAChCmB,UANG,SAQQjB,EAAUC,EAAKC,EAAS,IARhC,oF,sBAoBA,SAAeoB,EAAtB,oC,4CAAO,WAAwBC,EAAQN,GAAhC,eAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC8B,EADhC,0BAEQvB,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,sBAcA,SAAeO,EAAtB,oC,4CAAO,WAA0BC,EAAaR,GAAvC,iBAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,EAAYC,GAD5C,iBAECxB,EAAU,CACdgB,OAAQ,MACRvB,UACAwB,KAAMC,KAAKC,UAAUxB,EAAW4B,IAChCR,UANG,SAQQjB,EAAUC,EAAKC,EAASuB,GARhC,oF,kEAoBA,WAA0BF,EAAQN,GAAlC,iBAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC8B,GAC/BrB,EAAU,CAAEgB,OAAQ,SAAUD,UAF/B,SAGQjB,EAAUC,EAAKC,GAHvB,oF,kEAkBA,WAA0BqB,EAAQI,EAAMV,GAAxC,iBAAAb,EAAA,6DAGCH,EAHD,UAGUR,EAHV,UAILkC,EAAKJ,OAASK,OAAOL,GACfrB,EAAU,CACdgB,OAAQ,OACRvB,UACAwB,KAAMC,KAAKC,UAAUM,GACrBV,UATG,SAWQjB,EAAUC,EAAKC,EAASyB,GAXhC,oF,kEAuBA,WAAwBE,EAAQZ,GAAhC,eAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCoC,GADhC,SAEQ7B,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,kEAcA,WAA0Ba,EAAab,GAAvC,iBAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCqC,EAAYJ,IAC3CxB,EAAU,CACdgB,OAAQ,MACRvB,UACAwB,KAAMC,KAAKC,UAAUS,IALlB,SAOQ9B,EAAUC,EAAKC,EAAS4B,GAPhC,oF,kEAmBA,WAA0BD,EAAQZ,GAAlC,iBAAAb,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCoC,GAC/B3B,EAAU,CAAEgB,OAAQ,SAAUD,UAF/B,SAGQjB,EAAUC,EAAKC,GAHvB,oF,sBA5MPP,EAAQoC,OAAO,eAAgB,oB,kBCPhB,SAASC,EAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,UAAWP,EAAM,EAANA,GACpCQ,EAAOD,EAAUE,KAAI,SAACC,EAAOC,GACjC,OAAIA,IAAUJ,EAAUK,OAAS,EAE7B,oBAAgBC,UAAU,kBAAkB,eAAa,OAAzD,SACGH,GADMC,GAMX,oBAAgBE,UAAU,kBAA1B,SACE,cAAC,IAAD,CAAMC,GAAE,iBAAYd,GAApB,SAA2BU,KADpBC,MAMb,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAIE,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEDN,OCpBM,SAASO,IACtB,IACA,EAAgCC,mBAAS,eADhB,CAAE/B,KAAM,GAAIgC,YAAa,MAClD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAEVC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBJ,EAAY,2BAAKD,GAAN,kBAAiBK,EAAOtC,KAAOsC,EAAOC,UAWnD,OACE,qCACE,cAAClB,EAAD,CAAQC,UAAW,CAAC,iBACpB,qBAAKM,UAAU,iBAAf,SACE,uBAAMY,SAZS,SAAAC,GACnBA,EAAMC,iBFuEH,SAAP,oCEtEIC,CAAWV,GACRW,KAAK/B,GACL+B,MAAK,SAAAC,GAAO,OAAIV,EAAQW,KAAR,iBAAuBD,EAAQ9B,QAC/CgC,MAAM9C,QAAQC,QAOb,UACE,sBAAK0B,UAAU,aAAf,UACE,uBAAOoB,QAAQ,OAAf,kBACA,uBACEjC,GAAG,OACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,OACLkD,YAAY,YACZC,SAAUd,EACVE,MAAON,EAASjC,UAGpB,sBAAK4B,UAAU,aAAf,UACE,uBAAOoB,QAAQ,cAAf,yBACA,0BACEjC,GAAG,cACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,cACLkD,YAAY,gCACZC,SAAUd,EACVE,MAAON,EAASD,iBAGpB,wBACEiB,KAAK,SACLrB,UAAU,wBACVwB,QAAS,kBAAMjB,EAAQW,KAAK,MAH9B,oBAOA,wBAAQG,KAAK,SAASrB,UAAU,sBAAhC,4BCxDK,SAASyB,EAAT,GAA4C,IAApBnD,EAAmB,EAAnBA,MAAOoD,EAAY,EAAZA,SAC5C,OACE,uBAAM1B,UAAU,YAAhB,UACE,oBAAG2B,MAAO,CAAEC,MAAO,OAAnB,oBAAoCtD,EAAMuD,WACzCH,KCJQ,SAASI,IACtB,OACE,qBAAK9B,UAAU,iBAAf,SACE,2CCES,SAAS+B,EAAT,GAAiC,IAAX/C,EAAU,EAAVA,OAC7BgD,EAAmB,CAAEC,MAAO,GAAIC,KAAM,IAC5C,EAAwB/B,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa4E,EAAb,KACA,EAA0BhC,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KACA,EAAgClC,mBAAS,eAAK6B,IAA9C,mBAAO3B,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAGhB8B,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAIvB,OAFAzD,EAASC,EAAQuD,EAAW7D,QAAQsC,KAAKmB,GAAShB,MAAMkB,GAEjD,kBAAME,EAAWE,WACvB,CAACzD,IAGJ,IAAMyB,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBJ,EAAY,2BAAKD,GAAN,kBAAiBK,EAAOtC,KAAOsC,EAAOC,UAYnD,OAAOrC,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClB+B,GAAa9C,EAGhB,qCACE,cAACkC,EAAD,CAAQN,GAAI5B,EAAK4B,GAAIO,UAAW,CAACnC,EAAKa,KAAM,cAC5C,qBAAK4B,UAAU,iBAAf,SACE,uBAAMY,SAhBS,SAAAC,GACnBA,EAAMC,iBLgIH,SAAP,sCK/HI4B,CAAWnF,EAAK4B,GAAIkB,GACjBW,KAAKV,EAAY,eAAK0B,KACtBb,MAAM9C,QAAQC,QAYb,UACE,sBAAK0B,UAAU,aAAf,UACE,uBAAOoB,QAAQ,QAAf,mBACA,0BACEjC,GAAG,QACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,QACLkD,YAAY,qBACZC,SAAUd,EACVE,MAAON,EAAS4B,WAGpB,sBAAKjC,UAAU,aAAf,UACE,uBAAOoB,QAAQ,OAAf,kBACA,0BACEjC,GAAG,OACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,OACLkD,YAAY,oBACZC,SAAUd,EACVE,MAAON,EAAS6B,UAGpB,wBACEb,KAAK,SACLrB,UAAU,wBACVwB,QAAS,kBAAMjB,EAAQW,KAAR,iBAAuB3D,EAAK4B,MAH7C,kBAOA,wBAAQkC,KAAK,SAASrB,UAAU,sBAAhC,0BArCN,cAAC8B,EAAD,ICjCW,SAASa,EAAT,GAA+B,IAAX3D,EAAU,EAAVA,OACjC,EAAwBmB,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa4E,EAAb,KACA,EAA0BhC,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KACQ/C,EAAWsD,cAAXtD,OACR,EAAgCa,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAEhB8B,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAKvB,ONiKG,SAAP,oCMpKIK,CAASvD,EAAQiD,EAAW7D,QAAQsC,KAAKV,GAAaa,MAAMkB,GAC5DtD,EAASC,EAAQuD,EAAW7D,QAAQsC,KAAKmB,GAAShB,MAAMkB,GAEjD,kBAAME,EAAWE,WACvB,CAACnD,EAAQN,IAGZ,IAAMyB,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBJ,EAAY,2BAAKD,GAAN,kBAAiBK,EAAOtC,KAAOsC,EAAOC,UAYnD,OAAOrC,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClB+B,GAAa9C,EAGhB,qCACE,cAACkC,EAAD,CAAQN,GAAIH,EAAQU,UAAW,CAACnC,EAAKa,KAAN,oBAAyBkB,MACxD,qBAAKU,UAAU,iBAAf,SACE,uBAAMY,SAhBS,SAAAC,GACnBA,EAAMC,iBNqKH,SAAP,oCMpKIgC,CAAWzC,GAAUW,MAAK,kBACxBT,EAAQW,KAAR,iBAAuBlC,QAarB,UACE,sBAAKgB,UAAU,aAAf,UACE,uBAAOoB,QAAQ,QAAf,mBACA,0BACEjC,GAAG,OACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,QACLmD,SAAUd,EACVE,MAAON,EAAS4B,WAGpB,sBAAKjC,UAAU,aAAf,UACE,uBAAOoB,QAAQ,cAAf,kBACA,0BACEjC,GAAG,OACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,OACLmD,SAAUd,EACVE,MAAON,EAAS6B,UAGpB,wBACEb,KAAK,SACLrB,UAAU,wBACVwB,QAAS,kBAAMjB,EAAQW,KAAK,MAH9B,oBAOA,wBAAQG,KAAK,SAASrB,UAAU,sBAAhC,4BAnCN,cAAC8B,EAAD,ICtCW,SAASiB,IACtB,OACE,qBAAK/C,UAAU,WAAf,SACE,6CCCS,SAASgD,EAAT,GAAmC,IAAXhE,EAAU,EAAVA,OAC7BtB,EAAQuF,cAARvF,IACR,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwF,KAAI,UAAKxF,EAAL,iBAAX,SACE,cAACiF,EAAD,CAAU3D,OAAQA,MAEpB,cAAC,IAAD,CAAOkE,KAAI,UAAKxF,EAAL,QAAX,SACE,cAACqE,EAAD,CAAY/C,OAAQA,MAEtB,cAAC+D,EAAD,OCbS,SAASI,EAAT,GAA4C,IAAzBnE,EAAwB,EAAxBA,OAAQM,EAAgB,EAAhBA,OAExC,MAAgB,SAFwC,EAAR+B,KAG9C,wBACErB,UAAU,yBACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAE,iBAAYjB,EAAZ,SAA2BgB,UAAU,aAA7C,oBAKF,wBACEA,UAAU,yBACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAE,iBAAYjB,EAAZ,kBAA4BM,EAA5B,SAA2CU,UAAU,aAA7D,oBCjBS,SAASqD,EAAT,GAAkC,IAAblE,EAAY,EAAZA,GAAIkC,EAAQ,EAARA,KAChCd,EAAUC,cAahB,OACE,wBACER,UAAU,kCACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SACLG,QAhBiB,WAEjB8B,OAAOC,QAAP,sBACiBlC,EADjB,6CAIS,SAATA,EV+HC,SAAP,oCU/HwBmC,CAAWrE,GAAI6B,KAAKT,EAAQW,KAAK,MVyMlD,SAAP,6BUzMiEuC,CAAWtE,IAExEoB,EAAQmD,MAIR,oBCfW,SAASC,EAAT,GAAyC,IAAjBvE,EAAgB,EAAhBA,KAAMJ,EAAU,EAAVA,OAC3C,OACE,qBAAKgB,UAAU,mCAAf,SACE,sBAAKA,UAAU,WAAW2B,MAAO,CAAEyB,MAAO,SAA1C,UACE,sBAAKpD,UAAU,gBAAf,UACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mBACA,mBAAGA,UAAU,YAAb,SAA0BZ,EAAK6C,WAEjC,sBAAKjC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,kBACA,mBAAGA,UAAU,YAAb,SAA0BZ,EAAK8C,aAGnC,qBAAKlC,UAAU,cAAf,SACE,sBAAKA,UAAU,cAAf,UACE,cAACmD,EAAD,CAAS7D,OAAQF,EAAKD,GAAIH,OAAQA,EAAQqC,KAAK,SAC/C,cAACgC,EAAD,CAAWlE,GAAIC,EAAKD,GAAIkC,KAAK,gBAduBjC,EAAKD,MCJtD,SAASyE,EAAT,GAAsC,IAAjB5E,EAAgB,EAAhBA,OAElC,MAAgB,SAFkC,EAARqC,KAGxC,qBAAKrB,UAAU,aAAf,SACE,wBACEA,UAAU,oBACV2B,MAAO,CAAEyB,MAAO,SAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAG,aAAaD,UAAU,aAAhC,6BAMJ,wBACEA,UAAU,uBACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAE,iBAAYjB,EAAZ,cAAgCgB,UAAU,aAAlD,yBCpBS,SAAS6D,EAAT,GAA2B,IAAP1E,EAAM,EAANA,GACjC,OACE,wBACEa,UAAU,uBACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAE,iBAAYd,EAAZ,UAAwBa,UAAU,aAA1C,qBCCS,SAAS8D,EAAT,GAA+B,IAAX9E,EAAU,EAAVA,OACjC,EAAwBmB,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa4E,EAAb,KACA,EAA0BhC,mBAAS,IAAnC,mBAAO3C,EAAP,KAAcuG,EAAd,KACA,EAA0B5D,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KAGAC,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBASvB,OAPAzD,EAASC,EAAQuD,EAAW7D,QACzBsC,MAAK,SAAAgD,GACJ7B,EAAQ6B,GACRD,EAASC,EAAYxG,UAEtB2D,MAAMkB,GAEF,kBAAME,EAAWE,WACvB,CAACzD,IAGJ,IAAMiF,EAAWzG,EAAMoC,KAAI,SAAAR,GAAI,OAC7B,cAACuE,EAAD,CAAcvE,KAAMA,EAAMJ,OAAQzB,EAAK4B,QAIzC,OAAOb,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClBf,GAASC,EAGZ,qCACE,cAACiC,EAAD,CAAQN,GAAI5B,EAAK4B,GAAIO,UAAW,CAACnC,EAAKa,QACtC,sBAAK4B,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BzC,EAAKa,OACjC,mBAAG4B,UAAU,YAAb,SAA0BzC,EAAK6C,iBAEjC,qBAAKJ,UAAU,cAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,cAACmD,EAAD,CAASnE,OAAQzB,EAAK4B,GAAIkC,KAAK,SAC/B,cAACwC,EAAD,CAAU1E,GAAI5B,EAAK4B,KACnB,cAACyE,EAAD,CAAW5E,OAAQzB,EAAK4B,GAAIkC,KAAK,SACjC,cAACgC,EAAD,CAAWlE,GAAI5B,EAAK4B,GAAIkC,KAAK,iBAInC,oBAAIrB,UAAU,iBAAd,mBACA,qBAAKA,UAAU,MAAf,SAAsBiE,IAjBxB,OAFA,cAACnC,EAAD,IChCW,SAASoC,EAAT,GAA+B,IAAXlF,EAAU,EAAVA,OACjC,EAAwBmB,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa4E,EAAb,KACA,EAAgChC,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA0BH,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KACM9B,EAAUC,cAGhB8B,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBASvB,OAPAzD,EAASC,EAAQuD,EAAW7D,QACzBsC,MAAK,SAAAgD,GACJ1D,EAAY0D,GACZ7B,EAAQ6B,MAET7C,MAAMkB,GAEF,kBAAME,EAAWE,WACvB,CAACzD,IAGJ,IAAMyB,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBJ,EAAY,2BAAKD,GAAN,kBAAiBK,EAAOtC,KAAOsC,EAAOC,UAUnD,OAAOrC,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClB+B,EAGH,qCACE,cAACZ,EAAD,CAAQN,GAAIH,EAAQU,UAAW,CAACnC,EAAKa,KAAM,eAC3C,qBAAK4B,UAAU,iBAAf,SACE,uBAAMY,SAdS,SAAAC,GACnBA,EAAMC,iBACN7B,EAAWoB,GAAUW,MAAK,kBAAMT,EAAQW,KAAR,iBAAuBlC,QAYnD,UACE,sBAAKgB,UAAU,aAAf,UACE,uBAAOoB,QAAQ,OAAf,kBACA,uBACEjC,GAAG,OACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,OACLmD,SAAUd,EACVE,MAAON,EAASjC,UAGpB,sBAAK4B,UAAU,aAAf,UACE,uBAAOoB,QAAQ,cAAf,yBACA,0BACEjC,GAAG,cACHkC,KAAK,OACLrB,UAAU,eACV5B,KAAK,cACLmD,SAAUd,EACVE,MAAON,EAASD,iBAGpB,wBACEiB,KAAK,SACLrB,UAAU,wBACVwB,QAAS,kBAAMjB,EAAQW,KAAK,MAH9B,oBAOA,wBAAQG,KAAK,SAASrB,UAAU,sBAAhC,4BAnCN,cAAC8B,EAAD,ICvCW,SAASqC,EAAT,GAAyC,IAArBC,EAAoB,EAApBA,SAAUpF,EAAU,EAAVA,OAC3C,OACE,sBAAKgB,UAAU,wBAAf,UACE,mDACA,+EACiDoE,EADjD,0BAIA,cAACR,EAAD,CAAW5E,OAAQA,EAAQqC,KAAK,YCRvB,SAASgD,EAAT,GAA+B,IAAV7G,EAAS,EAATA,MAC5B8G,EAAe,CAAExE,MAAO,EAAGyE,SAAS,EAAOC,QAAQ,GACzD,EAA8BrE,mBAAS,eAAKmE,IAA5C,mBAAOG,EAAP,KAAgBC,EAAhB,KACMnE,EAAUC,cA4BhB,OACE,qBAAKR,UAAU,oDAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,kBACQyE,EAAQ3E,MAAQ,EADxB,OAC+BtC,EAAMuC,UAErC,mBAAGC,UAAU,YAAb,SACGyE,EAAQF,QACL/G,EAAMiH,EAAQ3E,OAAOoC,KACrB1E,EAAMiH,EAAQ3E,OAAOmC,WAG7B,qBAAKjC,UAAU,cAAf,SACE,sBAAKA,UAAU,cAAf,UACE,wBACEA,UAAU,oCACV2B,MAAO,CAAEyB,MAAO,QAChB5B,QA5CK,SAAAX,GACjB6D,EAAW,2BACND,GADK,IAERF,SAAUE,EAAQF,QAClBC,QAAQ,MAqCA,kBAOCC,EAAQD,QAAUC,EAAQ3E,MAAQtC,EAAMuC,OAAS,EAChD,wBACEC,UAAU,mCACV2B,MAAO,CAAEyB,MAAO,QAChB5B,QA3CG,WACjBkD,EAAW,2BACND,GADK,IAER3E,MAAO2E,EAAQ3E,MAAQ,EACvByE,SAAS,EACTC,QAAQ,MAmCE,kBAQAC,EAAQD,QACN,wBACExE,UAAU,mCACV2B,MAAO,CAAEyB,MAAO,QAChB5B,QA1CE,WAClB8B,OAAOC,QAAP,8DACImB,EAAWJ,GACX/D,EAAQW,KAAK,MAoCH,+BC3DH,SAASyD,EAAT,GAAgC,IAAX3F,EAAU,EAAVA,OAClC,EAAwBmB,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa4E,EAAb,KACA,EAA0BhC,qBAA1B,mBAAO3C,EAAP,KAAcuG,EAAd,KACA,EAA0B5D,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KAiBA,OAdAC,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBASvB,OAPAzD,EAASC,EAAQuD,EAAW7D,QACzBsC,MAAK,SAAAgD,GACJ7B,EAAQ6B,GACRD,EAASC,EAAYxG,UAEtB2D,MAAMkB,GAEF,kBAAME,EAAWE,WACvB,CAACzD,IAGGV,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClBf,GAASC,EAEVA,EAAMuC,OAAS,EACjB,qCACE,qBAAIC,UAAU,cAAd,oBAAoCzC,EAAKa,QACzC,cAAC+F,EAAD,CAAUC,SAAU5G,EAAMuC,OAAQf,OAAQA,OAG5C,qCACE,cAACS,EAAD,CAAQN,GAAIH,EAAQU,UAAW,CAACnC,EAAKa,KAAM,WAC3C,qBAAI4B,UAAU,cAAd,oBAAoCzC,EAAKa,QACzC,cAACiG,EAAD,CAAWrF,OAAQA,EAAQxB,MAAOA,OAVpC,cAACsE,EAAD,ICxBW,SAAS8C,IACtB,MAGI3B,cAFFvF,EADF,EACEA,IACUsB,EAFZ,EAEE6F,OAAU7F,OAGZ,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkE,KAAI,UAAKxF,EAAL,UAAX,SACE,cAACiH,EAAD,CAAW3F,OAAQA,MAErB,cAAC,IAAD,CAAOkE,KAAI,UAAKxF,EAAL,SAAX,SACE,cAACwG,EAAD,CAAUlF,OAAQA,MAEpB,cAAC,IAAD,CAAOkE,KAAI,UAAKxF,EAAL,UAAX,SACE,cAACsF,EAAD,CAAchE,OAAQA,MAExB,cAAC,IAAD,CAAO8F,OAAK,EAAC5B,KAAMxF,EAAnB,SACE,cAAC,EAAD,CAAUsB,OAAQA,SCtBX,SAAS+F,EAAT,GAA0B,IAAP5F,EAAM,EAANA,GAChC,OACE,wBACEa,UAAU,yBACV2B,MAAO,CAAEyB,MAAO,QAChB/B,KAAK,SAHP,SAKE,cAAC,IAAD,CAAMpB,GAAE,iBAAYd,GAAMa,UAAU,aAApC,oBCLS,SAASgF,GAAT,GAAiC,IAATzH,EAAQ,EAARA,KACrC,OACE,qBAAKyC,UAAU,mCAAf,SACE,sBAAKA,UAAU,WAAW2B,MAAO,CAAEyB,MAAO,SAA1C,UACE,sBAAKpD,UAAU,YAAf,UACE,oBAAIA,UAAU,4CAAd,SACGzC,EAAKC,MAAMuC,SAEd,oBAAIC,UAAU,aAAd,SAA4BzC,EAAKa,OACjC,mBAAG4B,UAAU,YAAb,SAA0BzC,EAAK6C,iBAEjC,qBAAKJ,UAAU,cAAf,SACE,sBAAKA,UAAU,cAAf,UACE,cAAC+E,EAAD,CAAS5F,GAAI5B,EAAK4B,KAClB,cAAC0E,EAAD,CAAU1E,GAAI5B,EAAK4B,KACnB,cAACkE,EAAD,CAAWlE,GAAI5B,EAAK4B,GAAIkC,KAAK,gBAZuB9D,EAAK4B,MCDtD,SAAS8F,KACtB,MAA0B9E,mBAAS,IAAnC,mBAAO+E,EAAP,KAAcC,EAAd,KACA,EAA0BhF,wBAASiC,GAAnC,mBAAO9D,EAAP,KAAc+D,EAAd,KAGAC,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAIvB,OtBsDG,SAAP,kCsBxDI4C,CAAU7C,EAAW7D,QAAQsC,KAAKmE,GAAUhE,MAAMkB,GAE3C,kBAAME,EAAWE,WACvB,IAGH,IAAM9C,EAAOuF,EAAMtF,KAAI,SAAArC,GAAI,OAAI,cAACyH,GAAD,CAAczH,KAAMA,OAGnD,OAAOe,EACL,cAACmD,EAAD,CAAcnD,MAAOA,IAClB4G,EAGH,iCACE,cAACtB,EAAD,CAAWvC,KAAK,SAChB,qBAAKrB,UAAU,MAAf,SAAsBL,OAJxB,cAACmC,EAAD,ICdWuD,OAXf,WACE,OACE,wBAAQrF,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,OAAb,sDCCO,SAASsF,KACtB,OACE,qCACE,cAAC,GAAD,IACA,qBAAKtF,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8E,OAAK,EAAC5B,KAAK,IAAlB,SACE,cAAC+B,GAAD,MAEF,cAAC,IAAD,CAAOH,OAAK,EAAC5B,KAAK,aAAlB,SACE,cAAChD,EAAD,MAEF,cAAC,IAAD,CAAOgD,KAAK,iBAAZ,SACE,cAAC0B,EAAD,MAEF,cAAC7B,EAAD,YCPKwC,OAZf,WACE,OACE,qBAAKvF,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOkD,KAAK,IAAZ,SACE,cAACoC,GAAD,WCJVE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.9976f692.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function NavBar({ navTitles, id }) {\n  const list = navTitles.map((title, index) => {\n    if (index === navTitles.length - 1) {\n      return (\n        <li key={index} className=\"breadcrumb-item\" aria-current=\"page\">\n          {title}\n        </li>\n      );\n    }\n    return (\n      <li key={index} className=\"breadcrumb-item\">\n        <Link to={`/decks/${id}`}>{title}</Link>\n      </li>\n    );\n  });\n\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\">Home</Link>\n        </li>\n        {list}\n      </ol>\n    </nav>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createDeck, updateDeck } from \"../../utils/api\";\nimport NavBar from \"../common/NavBar\";\n\nexport default function CreateDeck() {\n  const initialFormState = { name: \"\", description: \"\" };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const history = useHistory();\n  // update form data when changed\n  const handleChange = ({ target }) => {\n    setFormData({ ...formData, [target.name]: target.value });\n  };\n  // create deck and navigate to new deck page\n  const handleSubmit = event => {\n    event.preventDefault();\n    createDeck(formData)\n      .then(updateDeck)\n      .then(newDeck => history.push(`/decks/${newDeck.id}`))\n      .catch(console.error);\n  };\n\n  return (\n    <>\n      <NavBar navTitles={[\"Create Deck\"]} />\n      <div className=\"container w-75\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              id=\"name\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"name\"\n              placeholder=\"Deck Name\"\n              onChange={handleChange}\n              value={formData.name}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"description\"\n              placeholder=\"Brief description of the deck\"\n              onChange={handleChange}\n              value={formData.description}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary m-2\"\n            onClick={() => history.push(\"/\")}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function ErrorMessage({ error, children }) {\n  return (\n    <main className=\"container\">\n      <p style={{ color: \"red\" }}>ERROR: {error.message}</p>\n      {children}\n    </main>\n  );\n}\n","import React from \"react\";\n\nexport default function LoadingMessage() {\n  return (\n    <div className=\"LoadingMessage\">\n      <h1>Loading</h1>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../../../utils/api\";\nimport ErrorMessage from \"../../common/ErrorMessage\";\nimport LoadingMessage from \"../../common/LoadingMessage\";\nimport NavBar from \"../../common/NavBar\";\n\nexport default function CreateCard({ deckId }) {\n  const initialFormState = { front: \"\", back: \"\" };\n  const [deck, setDeck] = useState({});\n  const [error, setError] = useState(undefined);\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const history = useHistory();\n\n  // get deck from api\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readDeck(deckId, controller.signal).then(setDeck).catch(setError);\n\n    return () => controller.abort();\n  }, [deckId]);\n\n  // update form when changed\n  const handleChange = ({ target }) => {\n    setFormData({ ...formData, [target.name]: target.value });\n  };\n\n  // create card then reset form\n  const handleSubmit = event => {\n    event.preventDefault();\n    createCard(deck.id, formData)\n      .then(setFormData({ ...initialFormState }))\n      .catch(console.error);\n  };\n\n  // only display if there is formData and no error\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !formData || !deck ? (\n    <LoadingMessage />\n  ) : (\n    <>\n      <NavBar id={deck.id} navTitles={[deck.name, \"Add Card\"]} />\n      <div className=\"container w-75\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"front\">Front</label>\n            <textarea\n              id=\"front\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"front\"\n              placeholder=\"Front side of card\"\n              onChange={handleChange}\n              value={formData.front}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"back\">Back</label>\n            <textarea\n              id=\"back\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"back\"\n              placeholder=\"Back side of card\"\n              onChange={handleChange}\n              value={formData.back}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary m-2\"\n            onClick={() => history.push(`/decks/${deck.id}`)}\n          >\n            Done\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\n            Save\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { updateCard, readCard, readDeck } from \"../../../utils/api\";\nimport ErrorMessage from \"../../common/ErrorMessage\";\nimport LoadingMessage from \"../../common/LoadingMessage\";\nimport NavBar from \"../../common/NavBar\";\n\nexport default function EditCard({ deckId }) {\n  const [deck, setDeck] = useState({});\n  const [error, setError] = useState(undefined);\n  const { cardId } = useParams();\n  const [formData, setFormData] = useState({});\n  const history = useHistory();\n  // get card and deck from api\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readCard(cardId, controller.signal).then(setFormData).catch(setError);\n    readDeck(deckId, controller.signal).then(setDeck).catch(setError);\n\n    return () => controller.abort();\n  }, [cardId, deckId]);\n\n  // update form when changed\n  const handleChange = ({ target }) => {\n    setFormData({ ...formData, [target.name]: target.value });\n  };\n\n  // update card and navigate to deck page\n  const handleSubmit = event => {\n    event.preventDefault();\n    updateCard(formData).then(() =>\n      history.push(`/decks/${deckId}`)\n    );\n  };\n\n  // only display if there is a deck and formData and no error\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !formData || !deck ? (\n    <LoadingMessage />\n  ) : (\n    <>\n      <NavBar id={deckId} navTitles={[deck.name, `Edit Card ${cardId}`]} />\n      <div className=\"container w-75\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"front\">Front</label>\n            <textarea\n              id=\"name\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"front\"\n              onChange={handleChange}\n              value={formData.front}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Back</label>\n            <textarea\n              id=\"back\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"back\"\n              onChange={handleChange}\n              value={formData.back}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary m-2\"\n            onClick={() => history.push(\"/\")}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport CreateCard from \"./CreateCard\";\nimport EditCard from \"./EditCard\";\nimport NotFound from \"../../common/NotFound\";\n\nexport default function CardCommands({ deckId }) {\n  const { url } = useRouteMatch();\n  return (\n    <Switch>\n      <Route path={`${url}/:cardId/edit`}>\n        <EditCard deckId={deckId} />\n      </Route>\n      <Route path={`${url}/new`}>\n        <CreateCard deckId={deckId} />\n      </Route>\n      <NotFound />\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function EditBtn({ deckId, cardId, type }) {\n  // if deck then display button for deck, otherwise display button for card\n  return type === \"deck\" ? (\n    <button\n      className=\"btn btn-secondary mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"button\"\n    >\n      <Link to={`/decks/${deckId}/edit`} className=\"text-white\">\n        Edit\n      </Link>\n    </button>\n  ) : (\n    <button\n      className=\"btn btn-secondary mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"button\"\n    >\n      <Link to={`/decks/${deckId}/cards/${cardId}/edit`} className=\"text-white\">\n        Edit\n      </Link>\n    </button>\n  );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteDeck, deleteCard } from \"../../../utils/api\";\n\nexport default function DeleteBtn({ id, type }) {\n  const history = useHistory();\n\n  const handleDelete = () => {\n    if (\n      window.confirm(\n        `Delete this ${type}\\n\\nYou will not be able to recover it`\n      )\n    ) {\n      type === \"deck\" ? deleteDeck(id).then(history.push(\"/\")) : deleteCard(id);\n    }\n    history.go()\n  };\n\n  return (\n    <button\n      className=\"btn btn-danger float-right mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"delete\"\n      onClick={handleDelete}\n    >\n      Delete\n    </button>\n  );\n}\n","import React from \"react\";\nimport EditBtn from \"../../common/buttons/EditBtn\";\nimport DeleteBtn from \"../../common/buttons/DeleteBtn\";\n\nexport default function CardListItem({ card, deckId }) {\n  return (\n    <div className=\"col-6 d-flex align-items-stretch\">\n      <div className=\"card m-2\" style={{ width: \"33rem\" }} key={card.id}>\n        <div className=\"card-body row\">\n          <div className=\"col\">\n            <h4 className=\"card-title\">Front</h4>\n            <p className=\"card-text\">{card.front}</p>\n          </div>\n          <div className=\"col\">\n            <h4 className=\"card-title\">Back</h4>\n            <p className=\"card-text\">{card.back}</p>\n          </div>\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"btn-wrapper\">\n            <EditBtn cardId={card.id} deckId={deckId} type=\"card\" />\n            <DeleteBtn id={card.id} type=\"card\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function CreateBtn({ deckId, type }) {\n  // if deck then display button for deck, otherwise display button for card\n  return type === \"deck\" ? (\n    <div className=\"text-right\">\n      <button\n        className=\"btn btn-secondary\"\n        style={{ width: \"12rem\" }}\n        type=\"button\"\n      >\n        <Link to=\"/decks/new\" className=\"text-white\">\n          Create Deck\n        </Link>\n      </button>\n    </div>\n  ) : (\n    <button\n      className=\"btn btn-primary mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"button\"\n    >\n      <Link to={`/decks/${deckId}/cards/new`} className=\"text-white\">\n        Add Cards\n      </Link>\n    </button>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function StudyBtn({ id }) {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"button\"\n    >\n      <Link to={`/decks/${id}/study`} className=\"text-white\">\n        Study\n      </Link>\n    </button>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../../utils/api\";\nimport CardListItem from \"./CardListItem\";\nimport CreateBtn from \"../../common/buttons/CreateBtn\";\nimport DeleteBtn from \"../../common/buttons/DeleteBtn\";\nimport EditBtn from \"../../common/buttons/EditBtn\";\nimport ErrorMessage from \"../../common/ErrorMessage\";\nimport LoadingMessage from \"../../common/LoadingMessage\";\nimport NavBar from \"../../common/NavBar\";\nimport StudyBtn from \"../../common/buttons/StudyBtn\";\n\nexport default function ViewDeck({ deckId }) {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n  const [error, setError] = useState(undefined);\n\n  // get deck and cards from api every time the deckId changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readDeck(deckId, controller.signal)\n      .then(currentDeck => {\n        setDeck(currentDeck);\n        setCards(currentDeck.cards);\n      })\n      .catch(setError);\n\n    return () => controller.abort();\n  }, [deckId]);\n\n  // create card for each card\n  const cardList = cards.map(card => (\n    <CardListItem card={card} deckId={deck.id} />\n  ));\n\n  // only display if there is a deck and cards and no error\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !deck || !cards ? (\n    <LoadingMessage />\n  ) : (\n    <>\n      <NavBar id={deck.id} navTitles={[deck.name]} />\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h3 className=\"card-title\">{deck.name}</h3>\n          <p className=\"card-text\">{deck.description}</p>\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"btn-wrapper text-left\">\n            <EditBtn deckId={deck.id} type=\"deck\" />\n            <StudyBtn id={deck.id} />\n            <CreateBtn deckId={deck.id} type=\"card\" />\n            <DeleteBtn id={deck.id} type=\"deck\" />\n          </div>\n        </div>\n      </div>\n      <h2 className=\"mb-2 mt-4 ml-2\">Cards</h2>\n      <div className=\"row\">{cardList}</div>;\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { updateDeck, readDeck } from \"../../utils/api\";\nimport ErrorMessage from \"../common/ErrorMessage\";\nimport LoadingMessage from \"../common/LoadingMessage\";\nimport NavBar from \"../common/NavBar\";\n\nexport default function EditDeck({ deckId }) {\n  const [deck, setDeck] = useState({});\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState(undefined);\n  const history = useHistory();\n\n  // get deck from api and setFormData every time deckId changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readDeck(deckId, controller.signal)\n      .then(currentDeck => {\n        setFormData(currentDeck);\n        setDeck(currentDeck);\n      })\n      .catch(setError);\n\n    return () => controller.abort();\n  }, [deckId]);\n\n  // update form when changed\n  const handleChange = ({ target }) => {\n    setFormData({ ...formData, [target.name]: target.value });\n  };\n\n  // update deck and navigate to deck page\n  const handleSubmit = event => {\n    event.preventDefault();\n    updateDeck(formData).then(() => history.push(`/decks/${deckId}`));\n  };\n\n  // only display if there is formData and no error\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !formData ? (\n    <LoadingMessage />\n  ) : (\n    <>\n      <NavBar id={deckId} navTitles={[deck.name, \"Edit Deck\"]} />\n      <div className=\"container w-75\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              id=\"name\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"name\"\n              onChange={handleChange}\n              value={formData.name}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              type=\"text\"\n              className=\"form-control\"\n              name=\"description\"\n              onChange={handleChange}\n              value={formData.description}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary m-2\"\n            onClick={() => history.push(\"/\")}\n          >\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport CreateBtn from \"../../common/buttons/CreateBtn\";\n\nexport default function LowCards({ numCards, deckId }) {\n  return (\n    <div className=\"container text-center\">\n      <h3>Not enough cards.</h3>\n      <p>\n        You need at least 3 cards to study. There are {numCards} cards in this\n        deck.\n      </p>\n      <CreateBtn deckId={deckId} type=\"card\" />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function StudyCard({ cards }) {\n  const initialState = { index: 0, flipped: false, viewed: false };\n  const [session, setSession] = useState({ ...initialState });\n  const history = useHistory();\n\n  // when pressed toggle flip state to change side and mark viewed\n  const handleFlip = event => {\n    setSession({\n      ...session,\n      flipped: !session.flipped,\n      viewed: true\n    });\n  };\n\n  // when pressed go to next card, if last card then reset\n  const handleNext = () => {\n    setSession({\n      ...session,\n      index: session.index + 1,\n      flipped: false,\n      viewed: false\n    });\n  };\n\n  // confirm user would like to reset or go home\n  const handleReset = () => {\n    window.confirm(`Restart cards?\\n\\nClick \"cancel\" to return to the homepage`)\n      ? setSession(initialState)\n      : history.push(\"/\");\n  };\n\n  return (\n    <div className=\"card-deck justify-content-center text-center mt-4\">\n      <div className=\"w-75\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">\n              Card {session.index + 1} of {cards.length}\n            </h4>\n            <p className=\"card-text\">\n              {session.flipped\n                ? cards[session.index].back\n                : cards[session.index].front}\n            </p>\n          </div>\n          <div className=\"card-footer\">\n            <div className=\"btn-wrapper\">\n              <button\n                className=\"btn btn-secondary mx-1 float-left\"\n                style={{ width: \"5rem\" }}\n                onClick={handleFlip}\n              >\n                Flip\n              </button>\n              {session.viewed && session.index < cards.length - 1 ? (\n                <button\n                  className=\"btn btn-primary mx-1 float-right\"\n                  style={{ width: \"5rem\" }}\n                  onClick={handleNext}\n                >\n                  Next\n                </button>\n              ) : (\n                session.viewed && (\n                  <button\n                    className=\"btn btn-primary mx-1 float-right\"\n                    style={{ width: \"5rem\" }}\n                    onClick={handleReset}\n                  >\n                    Reset\n                  </button>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../../utils/api\";\nimport ErrorMessage from \"../../common/ErrorMessage\";\nimport LoadingMessage from \"../../common/LoadingMessage\";\nimport LowCards from \"./LowCards\";\nimport NavBar from \"../../common/NavBar\";\nimport StudyCard from \"./StudyCard\";\n\nexport default function StudyDeck({ deckId }) {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState();\n  const [error, setError] = useState(undefined);\n\n  // get deck and cards from api every time the deckId changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readDeck(deckId, controller.signal)\n      .then(currentDeck => {\n        setDeck(currentDeck);\n        setCards(currentDeck.cards);\n      })\n      .catch(setError);\n\n    return () => controller.abort();\n  }, [deckId]);\n\n  // only display if there is a deck and cards no error. if there are less than 3 cards display low cards\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !deck || !cards ? (\n    <LoadingMessage />\n  ) : cards.length < 3 ? (\n    <>\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\n      <LowCards numCards={cards.length} deckId={deckId} />\n    </>\n  ) : (\n    <>\n      <NavBar id={deckId} navTitles={[deck.name, \"Study\"]} />\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\n      <StudyCard deckId={deckId} cards={cards} />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport CardCommands from \"./cards/index\";\nimport CardList from \"./view/CardList\";\nimport EditDeck from \"./EditDeck\";\nimport StudyDeck from \"./study/StudyDeck\";\n\nexport default function DeckCommands() {\n  const {\n    url,\n    params: { deckId }\n  } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${url}/study`}>\n        <StudyDeck deckId={deckId} />\n      </Route>\n      <Route path={`${url}/edit`}>\n        <EditDeck deckId={deckId} />\n      </Route>\n      <Route path={`${url}/cards`}>\n        <CardCommands deckId={deckId} />\n      </Route>\n      <Route exact path={url}>\n        <CardList deckId={deckId} />\n      </Route>\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ViewBtn({ id }) {\n  return (\n    <button\n      className=\"btn btn-secondary mx-1\"\n      style={{ width: \"7rem\" }}\n      type=\"button\"\n    >\n      <Link to={`/decks/${id}`} className=\"text-white\">\n        View\n      </Link>\n    </button>\n  );\n}\n","import React from \"react\";\nimport DeleteBtn from \"../common/buttons/DeleteBtn\";\nimport StudyBtn from \"../common/buttons/StudyBtn\";\nimport ViewBtn from \"../common/buttons/ViewBtn\";\n\nexport default function DeckListItem({ deck }) {\n  return (\n    <div className=\"col-6 d-flex align-items-stretch\">\n      <div className=\"card m-2\" style={{ width: \"33rem\" }} key={deck.id}>\n        <div className=\"card-body\">\n          <h6 className=\"card-subtitle mb-2 text-muted float-right\">\n            {deck.cards.length}\n          </h6>\n          <h5 className=\"card-title\">{deck.name}</h5>\n          <p className=\"card-text\">{deck.description}</p>\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"btn-wrapper\">\n            <ViewBtn id={deck.id} />\n            <StudyBtn id={deck.id} />\n            <DeleteBtn id={deck.id} type=\"deck\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { listDecks } from \"../../utils/api\";\nimport CreateBtn from \"../common/buttons/CreateBtn\";\nimport DeckListItem from \"./DeckListItem\";\nimport ErrorMessage from \"../common/ErrorMessage\";\nimport LoadingMessage from \"../common/LoadingMessage\";\n\nexport default function DeckList() {\n  const [decks, setDecks] = useState([]);\n  const [error, setError] = useState(undefined);\n\n  // get decks from api every time page loads\n  useEffect(() => {\n    const controller = new AbortController();\n\n    listDecks(controller.signal).then(setDecks).catch(setError);\n\n    return () => controller.abort();\n  }, []);\n\n  // create card for each deck\n  const list = decks.map(deck => <DeckListItem deck={deck} />);\n\n  // only display if there are decks and no error\n  return error ? (\n    <ErrorMessage error={error} />\n  ) : !decks ? (\n    <LoadingMessage />\n  ) : (\n    <main>\n      <CreateBtn type=\"deck\" />\n      <div className=\"row\">{list}</div>\n    </main>\n  );\n}\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckCommands from \"../deck/index\";\nimport DeckList from \"./DeckList\";\nimport Header from \"../common/Header\";\nimport NotFound from \"../common/NotFound\";\n\nexport default function Home() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route exact path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <DeckCommands />\n          </Route>\n          <NotFound />\n        </Switch>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/home/index\";\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\" >\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}