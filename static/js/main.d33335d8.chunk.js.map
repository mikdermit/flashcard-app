{"version":3,"sources":["utils/api/index.js","components/common/NavBar.js","components/home/CreateDeck.js","components/common/CardForm.js","components/deck/cards/CreateCard.js","components/common/ErrorMessage.js","components/common/LoadingMessage.js","components/deck/cards/EditCard.js","components/common/NotFound.js","components/deck/cards/index.js","components/common/buttons/EditButton.js","components/common/buttons/DeleteButton.js","components/deck/view/CardListItem.js","components/common/buttons/CreateButton.js","components/common/buttons/StudyButton.js","components/deck/view/CardList.js","components/deck/EditDeck.js","components/deck/study/LowCards.js","components/deck/study/StudyCard.js","components/deck/study/StudyDeck.js","components/deck/index.js","components/common/buttons/ViewButton.js","components/home/DeckListItem.js","components/home/DeckList.js","components/common/Header.js","components/home/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","card","Number","cardId","updatedCard","append","NavBar","navTitles","list","map","title","index","length","className","to","CreateDeck","useState","description","formData","setFormData","history","useHistory","handleChange","target","value","onSubmit","event","preventDefault","createDeck","then","newDeck","push","catch","htmlFor","type","placeholder","onChange","onClick","CardForm","setCard","handleSubmit","front","back","CreateCard","setCards","initialCardState","createCard","currentDeck","ErrorMessage","children","style","color","message","LoadingMessage","EditCard","useParams","undefined","setError","useEffect","controller","AbortController","readCard","abort","updateCard","NotFound","Cards","useRouteMatch","path","EditButton","width","DeleteButton","window","confirm","deleteDeck","deleteCard","go","CardListItem","CreateButton","StudyButton","ViewDeck","cardList","EditDeck","setDeck","LowCards","numCards","StudyCard","initialState","flipped","viewed","session","setSession","StudyDeck","DeckCommands","params","exact","ViewButton","DeckListItem","DeckList","decks","setDecks","listDecks","Header","Decks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d33335d8.chunk.js","sourcesContent":["/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  default value returned if the fetch is cancelled.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\n\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    return await response.json();\r\n\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, {});\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, updatedDeck);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, card);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options, updatedCard);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar({ navTitles, id }) {\r\n  const list = navTitles.map((title, index) => {\r\n    if (index === navTitles.length - 1) {\r\n      return (\r\n        <li key={index} className=\"breadcrumb-item\" aria-current=\"page\">\r\n          {title}\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <li key={index} className=\"breadcrumb-item\">\r\n        <Link to={`/decks/${id}`}>{title}</Link>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        {list}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck, updateDeck } from \"../../utils/api\";\r\nimport NavBar from \"../common/NavBar\";\r\n\r\nexport default function CreateDeck() {\r\n  const initialFormState = { name: \"\", description: \"\" };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const history = useHistory();\r\n  // update form data when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n  // create deck and navigate to new deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    createDeck(formData)\r\n      .then(updateDeck)\r\n      .then(newDeck => history.push(`/decks/${newDeck.id}`))\r\n      .catch(console.error);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar navTitles={[\"Create Deck\"]} />\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              placeholder=\"Deck Name\"\r\n              onChange={handleChange}\r\n              value={formData.name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              id=\"description\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"description\"\r\n              placeholder=\"Brief description of the deck\"\r\n              onChange={handleChange}\r\n              value={formData.description}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(\"/\")}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function CardForm({ deck, card, setCard, handleSubmit }) {\r\n  const history = useHistory()\r\n  // update card front when changed\r\n  const changeFront = event => {\r\n    setCard({ ...card, front: event.target.value })\r\n  }\r\n  // update card back when changed\r\n  const changeBack = event => {\r\n    setCard({ ...card, back: event.target.value })\r\n  }\r\n\r\n  // only display if there is formData and no error\r\n  return (\r\n    <>\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"front\">Front</label>\r\n            <textarea\r\n              id=\"front\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"front\"\r\n              placeholder=\"Front side of card\"\r\n              onChange={changeFront}\r\n              value={card.front}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"back\">Back</label>\r\n            <textarea\r\n              id=\"back\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"back\"\r\n              placeholder=\"Back side of card\"\r\n              onChange={changeBack}\r\n              value={card.back}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(`/decks/${deck.id}`)}\r\n          >\r\n            Done\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { createCard, readDeck } from \"../../../utils/api\";\r\nimport CardForm from \"../../common/CardForm\";\r\nimport NavBar from \"../../common/NavBar\";\r\n\r\nexport default function CreateCard({ deck, setCards }) {\r\n  const initialCardState = { front: \"\", back: \"\" };\r\n  const [card, setCard] = useState({ ...initialCardState });\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    //   ? updateCard(formData).then(() => history.push(`/decks/${deck.id}`))\r\n    createCard(deck.id, card)\r\n      .then(() => readDeck(deck.id))\r\n      .then(currentDeck => setCards(currentDeck.cards))\r\n      .then(setCard({ ...initialCardState }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name, \"Add Card\"]} />\r\n      <CardForm\r\n        deck={deck}\r\n        card={card}\r\n        setCard={setCard}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ErrorMessage({ error, children }) {\r\n  return (\r\n    <main className=\"container\">\r\n      <p style={{ color: \"red\" }}>ERROR: {error.message}</p>\r\n      {children}\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function LoadingMessage() {\r\n  return (\r\n    <div className=\"LoadingMessage\">\r\n      <h1>Loading</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { updateCard, readCard, readDeck } from \"../../../utils/api\";\r\nimport CardForm from \"../../common/CardForm\";\r\nimport ErrorMessage from \"../../common/ErrorMessage\";\r\nimport LoadingMessage from \"../../common/LoadingMessage\";\r\nimport NavBar from \"../../common/NavBar\";\r\n\r\nexport default function EditCard({ deck, setCards }) {\r\n  const { cardId } = useParams();\r\n  const [card, setCard] = useState({});\r\n  const [error, setError] = useState(undefined);\r\n  const history = useHistory();\r\n  // get card and deck from api\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readCard(cardId, controller.signal).then(setCard).catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [cardId]);\r\n\r\n  // update card and navigate to deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    updateCard(card)\r\n      .then(() => readDeck(deck.id))\r\n      .then(currentDeck => setCards(currentDeck.cards))\r\n      .then(() => history.push(`/decks/${deck.id}`));\r\n  };\r\n\r\n  // only display if there is a deck and formData and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !card ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name, `Edit Card ${cardId}`]} />\r\n      <CardForm\r\n        deck={deck}\r\n        card={card}\r\n        setCard={setCard}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport CreateCard from './CreateCard'\r\nimport EditCard from './EditCard'\r\nimport NotFound from \"../../common/NotFound\";\r\n\r\nexport default function Cards({ deck, setCards }) {\r\n  const { url } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${url}/:cardId/edit`}>\r\n        <EditCard deck={deck} setCards={setCards} />\r\n      </Route>\r\n      <Route path={`${url}/new`}>\r\n        <CreateCard deck={deck} setCards={setCards} />\r\n      </Route>\r\n      <NotFound />\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function EditButton({ deckId, cardId, type }) {\r\n  // if deck then display button for deck, otherwise display button for card\r\n  return type === \"deck\" ? (\r\n    <button\r\n      className=\"btn btn-secondary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/edit`} className=\"text-white\">\r\n        Edit\r\n      </Link>\r\n    </button>\r\n  ) : (\r\n    <button\r\n      className=\"btn btn-secondary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/cards/${cardId}/edit`} className=\"text-white\">\r\n        Edit\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteDeck, deleteCard } from \"../../../utils/api\";\r\n\r\nexport default function DeleteButton({ id, type }) {\r\n  const history = useHistory();\r\n\r\n  const handleDelete = () => {\r\n    if (\r\n      window.confirm(\r\n        `Delete this ${type}\\n\\nYou will not be able to recover it`\r\n      )\r\n    ) {\r\n      type === \"deck\" ? deleteDeck(id).then(history.push(\"/\")) : deleteCard(id);\r\n    }\r\n    history.go();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-danger float-right mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"delete\"\r\n      onClick={handleDelete}\r\n    >\r\n      Delete\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport EditButton from \"../../common/buttons/EditButton\";\r\nimport DeleteButton from \"../../common/buttons/DeleteButton\";\r\n\r\nexport default function CardListItem({ card, deckId }) {\r\n  return (\r\n    <div className=\"col-6 d-flex align-items-stretch\" key={card.id}>\r\n      <div className=\"card m-2\" style={{ width: \"33rem\" }} >\r\n        <div className=\"card-body row\">\r\n          <div className=\"col\">\r\n            <h4 className=\"card-title\">Front</h4>\r\n            <p className=\"card-text\">{card.front}</p>\r\n          </div>\r\n          <div className=\"col\">\r\n            <h4 className=\"card-title\">Back</h4>\r\n            <p className=\"card-text\">{card.back}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper\">\r\n            <EditButton cardId={card.id} deckId={deckId} type=\"card\" />\r\n            <DeleteButton id={card.id} type=\"card\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CreateButton({ deckId, type }) {\r\n  // if deck then display button for deck, otherwise display button for card\r\n  return type === \"deck\" ? (\r\n    <div className=\"text-right\">\r\n      <button\r\n        className=\"btn btn-secondary\"\r\n        style={{ width: \"12rem\" }}\r\n        type=\"button\"\r\n      >\r\n        <Link to=\"/decks/new\" className=\"text-white\">\r\n          Create Deck\r\n        </Link>\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <button\r\n      className=\"btn btn-primary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/cards/new`} className=\"text-white\">\r\n        Add Cards\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function StudyButton({ id }) {\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${id}/study`} className=\"text-white\">\r\n        Study\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CardListItem from \"./CardListItem\";\r\nimport CreateButton from \"../../common/buttons/CreateButton\";\r\nimport DeleteButton from \"../../common/buttons/DeleteButton\";\r\nimport EditButton from \"../../common/buttons/EditButton\";\r\nimport NavBar from \"../../common/NavBar\";\r\nimport StudyButton from \"../../common/buttons/StudyButton\";\r\n\r\nexport default function ViewDeck({ deck, cards }) {\r\n  // create card for each card\r\n  const cardList = cards.map(card => (\r\n    <CardListItem key={card.id} card={card} deckId={deck.id} />\r\n  ));\r\n\r\n  // display deck and cards\r\n  return (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name]} />\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title\">{deck.name}</h3>\r\n          <p className=\"card-text\">{deck.description}</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper text-left\">\r\n            <EditButton deckId={deck.id} type=\"deck\" />\r\n            <StudyButton id={deck.id} />\r\n            <CreateButton deckId={deck.id} type=\"card\" />\r\n            <DeleteButton id={deck.id} type=\"deck\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2 className=\"mb-2 mt-4 ml-2\">Cards</h2>\r\n      <div className=\"row\">{cardList}</div>;\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { updateDeck } from \"../../utils/api\";\r\nimport NavBar from \"../common/NavBar\";\r\n\r\nexport default function EditDeck({ deck, setDeck }) {\r\n  const [formData, setFormData] = useState({ ...deck });\r\n  const history = useHistory();\r\n\r\n  // update form when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n\r\n  // update deck and navigate to deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    updateDeck(formData)\r\n      .then(setDeck)\r\n      .then(() => history.push(`/decks/${deck.id}`));\r\n  };\r\n\r\n  // display form\r\n  return (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name, \"Edit Deck\"]} />\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              value={formData.name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              id=\"description\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"description\"\r\n              onChange={handleChange}\r\n              value={formData.description}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(\"/\")}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CreateButton from \"../../common/buttons/CreateButton\";\r\n\r\nexport default function LowCards({ numCards, deckId }) {\r\n  return (\r\n    <div className=\"container text-center\">\r\n      <h3>Not enough cards.</h3>\r\n      <p>\r\n        You need at least 3 cards to study. There are {numCards} cards in this\r\n        deck.\r\n      </p>\r\n      <CreateButton deckId={deckId} type=\"card\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function StudyCard({ cards }) {\r\n  const initialState = { index: 0, flipped: false, viewed: false };\r\n  const [session, setSession] = useState({ ...initialState });\r\n  const history = useHistory();\r\n\r\n  // when pressed toggle flip state to change side and mark viewed\r\n  const handleFlip = event => {\r\n    setSession({\r\n      ...session,\r\n      flipped: !session.flipped,\r\n      viewed: true\r\n    });\r\n  };\r\n\r\n  // when pressed go to next card, if last card then reset\r\n  const handleNext = () => {\r\n    setSession({\r\n      ...session,\r\n      index: session.index + 1,\r\n      flipped: false,\r\n      viewed: false\r\n    });\r\n  };\r\n\r\n  // confirm user would like to reset or go home\r\n  const handleReset = () => {\r\n    window.confirm(`Restart cards?\\n\\nClick \"cancel\" to return to the homepage`)\r\n      ? setSession(initialState)\r\n      : history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-deck justify-content-center text-center mt-4\">\r\n      <div className=\"w-75\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">\r\n              Card {session.index + 1} of {cards.length}\r\n            </h4>\r\n            <p className=\"card-text\">\r\n              {session.flipped\r\n                ? cards[session.index].back\r\n                : cards[session.index].front}\r\n            </p>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <div className=\"btn-wrapper\">\r\n              <button\r\n                className=\"btn btn-secondary mx-1 float-left\"\r\n                style={{ width: \"5rem\" }}\r\n                onClick={handleFlip}\r\n              >\r\n                Flip\r\n              </button>\r\n              {session.viewed && session.index < cards.length - 1 ? (\r\n                <button\r\n                  className=\"btn btn-primary mx-1 float-right\"\r\n                  style={{ width: \"5rem\" }}\r\n                  onClick={handleNext}\r\n                >\r\n                  Next\r\n                </button>\r\n              ) : (\r\n                session.viewed && (\r\n                  <button\r\n                    className=\"btn btn-primary mx-1 float-right\"\r\n                    style={{ width: \"5rem\" }}\r\n                    onClick={handleReset}\r\n                  >\r\n                    Reset\r\n                  </button>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport LowCards from \"./LowCards\";\r\nimport NavBar from \"../../common/NavBar\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nexport default function StudyDeck({ deck, cards }) {\r\n  // if there are less than 3 cards display low cards\r\n  return cards.length < 3 ? (\r\n    <>\r\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\r\n      <LowCards numCards={cards.length} deckId={deck.id} />\r\n    </>\r\n  ) : (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name, \"Study\"]} />\r\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\r\n      <StudyCard deckId={deck.id} cards={cards} />\r\n    </>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport {readDeck} from '../../utils/api'\r\nimport Cards from \"./cards/index\";\r\nimport CardList from \"./view/CardList\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport ErrorMessage from '../common/ErrorMessage'\r\nimport LoadingMessage from \"../common/LoadingMessage\";\r\nimport StudyDeck from \"./study/StudyDeck\";\r\n\r\nexport default function DeckCommands() {\r\n  const {\r\n    url,\r\n    params: { deckId }\r\n  } = useRouteMatch();\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([])\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // get deck from api and setFormData every time deckId changes\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readDeck(deckId, controller.signal)\r\n      .then(currentDeck => {\r\n        setDeck(currentDeck);\r\n        setCards(currentDeck.cards);\r\n      })\r\n      .catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [deckId, setDeck]);\r\n\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !deck || !cards ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <Switch>\r\n      <Route path={`${url}/study`}>\r\n        <StudyDeck deck={deck} cards={cards}/>\r\n      </Route>\r\n      <Route path={`${url}/edit`}>\r\n        <EditDeck deck={deck} setDeck={setDeck}/>\r\n      </Route>\r\n      <Route path={`${url}/cards`}>\r\n        <Cards deck={deck} setCards={setCards} />\r\n      </Route>\r\n      {/* <Route path={`${url}/cards/:cardId/edit`}>\r\n        <CardForm deck={deck} action=\"edit\"/>\r\n      </Route> */}\r\n      <Route exact path={url}>\r\n        <CardList deck={deck} cards={cards} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ViewButton({ id }) {\r\n  return (\r\n    <button\r\n      className=\"btn btn-secondary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${id}`} className=\"text-white\">\r\n        View\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport DeleteButton from \"../common/buttons/DeleteButton\";\r\nimport StudyButton from \"../common/buttons/StudyButton\";\r\nimport ViewButton from \"../common/buttons/ViewButton\";\r\n\r\nexport default function DeckListItem({ deck }) {\r\n  return (\r\n    <div className=\"col-6 d-flex align-items-stretch\" key={deck.id}>\r\n      <div className=\"card m-2\" style={{ width: \"33rem\" }}>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-subtitle mb-2 text-muted float-right\">\r\n            {deck.cards.length}\r\n          </h6>\r\n          <h5 className=\"card-title\">{deck.name}</h5>\r\n          <p className=\"card-text\">{deck.description}</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper\">\r\n            <ViewButton id={deck.id} />\r\n            <StudyButton id={deck.id} />\r\n            <DeleteButton id={deck.id} type=\"deck\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { listDecks } from \"../../utils/api\";\r\nimport CreateButton from \"../common/buttons/CreateButton\";\r\nimport DeckListItem from \"./DeckListItem\";\r\nimport ErrorMessage from \"../common/ErrorMessage\";\r\nimport LoadingMessage from \"../common/LoadingMessage\";\r\n\r\nexport default function DeckList() {\r\n  const [decks, setDecks] = useState([]);\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // get decks from api every time page loads\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    listDecks(controller.signal).then(setDecks).catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, []);\r\n\r\n  // create card for each deck\r\n  const list = decks.map(deck => <DeckListItem key={deck.id} deck={deck} />);\r\n\r\n  // only display if there are decks and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !decks ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <main>\r\n      <CreateButton type=\"deck\" />\r\n      <div className=\"row\">{list}</div>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron bg-dark\">\r\n      <div className=\"container text-white\">\r\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\r\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport CreateDeck from \"./CreateDeck\";\r\nimport DeckCommands from \"../deck/index\";\r\nimport DeckList from \"./DeckList\";\r\nimport Header from \"../common/Header\";\r\nimport NotFound from \"../common/NotFound\";\r\n\r\nexport default function Decks() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <DeckList />\r\n          </Route>\r\n          <Route exact path=\"/decks/new\">\r\n            <CreateDeck />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId\">\r\n            <DeckCommands />\r\n          </Route>\r\n          <NotFound />\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Decks from \"./components/home/index\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-routes\">\r\n      <Decks />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}