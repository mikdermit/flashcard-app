{"version":3,"sources":["utils/api/index.js","components/common/NavBar.js","components/home/CreateDeck.js","components/common/ErrorMessage.js","components/common/LoadingMessage.js","components/deck/cards/CreateCard.js","components/deck/cards/EditCard.js","components/common/NotFound.js","components/deck/cards/index.js","components/common/buttons/EditBtn.js","components/common/buttons/DeleteBtn.js","components/deck/view/CardListItem.js","components/common/buttons/CreateBtn.js","components/common/buttons/StudyBtn.js","components/deck/view/CardList.js","components/deck/EditDeck.js","components/deck/study/LowCards.js","components/deck/study/StudyCard.js","components/deck/study/StudyDeck.js","components/deck/index.js","components/common/buttons/ViewBtn.js","components/home/DeckListItem.js","components/home/DeckList.js","components/common/Header.js","components/home/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","card","Number","cardId","updatedCard","append","NavBar","navTitles","list","map","title","index","length","className","to","CreateDeck","useState","description","formData","setFormData","history","useHistory","handleChange","target","value","onSubmit","event","preventDefault","createDeck","then","newDeck","push","catch","htmlFor","type","placeholder","onChange","onClick","ErrorMessage","children","style","color","message","LoadingMessage","CreateCard","initialFormState","front","back","setDeck","undefined","setError","useEffect","controller","AbortController","abort","createCard","EditCard","useParams","readCard","updateCard","NotFound","CardCommands","useRouteMatch","path","EditBtn","width","DeleteBtn","window","confirm","deleteDeck","deleteCard","go","CardListItem","CreateBtn","StudyBtn","ViewDeck","setCards","currentDeck","cardList","EditDeck","LowCards","numCards","StudyCard","initialState","flipped","viewed","session","setSession","resetCards","StudyDeck","DeckCommands","params","exact","ViewBtn","DeckListItem","DeckList","decks","setDecks","listDecks","Header","Home","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8b1998c.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar({ navTitles, id }) {\r\n  const list = navTitles.map((title, index) => {\r\n    if (index === navTitles.length - 1) {\r\n      return (\r\n        <li key={index} className=\"breadcrumb-item\" aria-current=\"page\">\r\n          {title}\r\n        </li>\r\n      );\r\n    }\r\n    return (\r\n      <li key={index} className=\"breadcrumb-item\">\r\n        <Link to={`/decks/${id}`}>{title}</Link>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        {list}\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck, updateDeck } from \"../../utils/api\";\r\nimport NavBar from \"../common/NavBar\";\r\n\r\nexport default function CreateDeck() {\r\n  const initialFormState = { name: \"\", description: \"\" };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const history = useHistory();\r\n  // update form data when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n  // create deck and navigate to new deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    createDeck(formData)\r\n      .then(updateDeck)\r\n      .then(newDeck => history.push(`/decks/${newDeck.id}`))\r\n      .catch(console.error);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar navTitles={[\"Create Deck\"]} />\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              placeholder=\"Deck Name\"\r\n              onChange={handleChange}\r\n              value={formData.name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              id=\"description\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"description\"\r\n              placeholder=\"Brief description of the deck\"\r\n              onChange={handleChange}\r\n              value={formData.description}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(\"/\")}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ErrorMessage({ error, children }) {\r\n  return (\r\n    <main className=\"container\">\r\n      <p style={{ color: \"red\" }}>ERROR: {error.message}</p>\r\n      {children}\r\n    </main>\r\n  )\r\n}","import React from \"react\";\r\n\r\nexport default function LoadingMessage() {\r\n  return (\r\n    <div className=\"LoadingMessage\">\r\n      <h1>Loading</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../../../utils/api\";\r\nimport ErrorMessage from \"../../common/ErrorMessage\";\r\nimport LoadingMessage from '../../common/LoadingMessage'\r\nimport NavBar from \"../../common/NavBar\";\r\n\r\nexport default function CreateCard({ deckId }) {\r\n  const initialFormState = { front: \"\", back: \"\" };\r\n  const [deck, setDeck] = useState({});\r\n  const [error, setError] = useState(undefined);\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const history = useHistory();\r\n\r\n  // get deck from api\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readDeck(deckId, controller.signal).then(setDeck).catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [deckId]);\r\n\r\n  // update form when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n\r\n  // create card then reset form\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    createCard(deck.id, formData)\r\n      .then(setFormData({ ...initialFormState }))\r\n      .catch(console.error);\r\n  };\r\n\r\n  // only display if there is formData and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !formData|| !deck ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name, \"Add Card\"]} />\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"front\">Front</label>\r\n            <textarea\r\n              id=\"front\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"front\"\r\n              placeholder=\"Front side of card\"\r\n              onChange={handleChange}\r\n              value={formData.front}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"back\">Back</label>\r\n            <textarea\r\n              id=\"back\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"back\"\r\n              placeholder=\"Back side of card\"\r\n              onChange={handleChange}\r\n              value={formData.back}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(`/decks/${deck.id}`)}\r\n          >\r\n            Done\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { updateCard, readCard, readDeck } from \"../../../utils/api\";\r\nimport ErrorMessage from \"../../common/ErrorMessage\";\r\nimport LoadingMessage from '../../common/LoadingMessage'\r\nimport NavBar from '../../common/NavBar'\r\n\r\nexport default function EditCard({ deckId }) {\r\n  const [deck, setDeck] = useState({})\r\n  const [error, setError] = useState(undefined);\r\n  const {cardId} = useParams()\r\n  const [formData, setFormData] = useState({});\r\n  const history = useHistory();\r\n  // get card and deck from api\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readCard(cardId, controller.signal).then(setFormData).catch(setError)\r\n    readDeck(deckId, controller.signal).then(setDeck).catch(setError)\r\n\r\n    return () => controller.abort();\r\n  }, [cardId, deckId]);\r\n\r\n  // update form when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n\r\n  // update card and navigate to deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    updateCard(formData).then(() => history.push(`/decks/${deckId}`));\r\n  };\r\n    \r\n  // only display if there is a deck and formData and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !formData|| !deck ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <>\r\n    <NavBar id={deckId} navTitles={[deck.name, `Edit Card ${cardId}`]} />\r\n    <div className=\"container w-75\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"front\">Front</label>\r\n          <textarea\r\n            id=\"name\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"front\"\r\n            onChange={handleChange}\r\n            value={formData.front}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"description\">Back</label>\r\n          <textarea\r\n            id=\"back\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"back\"\r\n            onChange={handleChange}\r\n            value={formData.back}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary m-2\"\r\n          onClick={() => history.push(\"/\")}\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport CreateCard from \"./CreateCard\";\r\nimport EditCard from \"./EditCard\";\r\nimport NotFound from \"../../common/NotFound\";\r\n\r\nexport default function CardCommands({ deckId }) {\r\n  const { url } = useRouteMatch();\r\n  return (\r\n    <Switch>\r\n      <Route path={`${url}/:cardId/edit`}>\r\n        <EditCard deckId={deckId} />\r\n      </Route>\r\n      <Route path={`${url}/new`}>\r\n        <CreateCard deckId={deckId} />\r\n      </Route>\r\n      <NotFound />\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function EditBtn({ deckId, cardId, type }) {\r\n  // if deck then display button for deck, otherwise display button for card\r\n  return type === \"deck\" ? (\r\n    <button\r\n      className=\"btn btn-secondary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/edit`} className=\"text-white\">\r\n        Edit\r\n      </Link>\r\n    </button>\r\n  ) : (\r\n    <button\r\n      className=\"btn btn-secondary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/cards/${cardId}/edit`} className=\"text-white\">\r\n        Edit\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteDeck, deleteCard } from \"../../../utils/api\";\r\n\r\nexport default function DeleteBtn({ id, type }) {\r\n  const history = useHistory();\r\n\r\n  const handleDelete = () => {\r\n    if (\r\n      window.confirm(\r\n        `Delete this ${type}\\n\\nYou will not be able to recover it`\r\n      )\r\n    ) {\r\n      type === \"deck\" ? deleteDeck(id).then(history.push(\"/\")) : deleteCard(id);\r\n    }\r\n    history.go();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-danger float-right mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"delete\"\r\n      onClick={handleDelete}\r\n    >\r\n      Delete\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport EditBtn from \"../../common/buttons/EditBtn\";\r\nimport DeleteBtn from \"../../common/buttons/DeleteBtn\";\r\n\r\nexport default function CardListItem({ card, deckId }) {\r\n  return (\r\n    <div className=\"col-6 d-flex align-items-stretch\">\r\n      <div className=\"card m-2\" key={card.id}>\r\n        <div className=\"card-body row\">\r\n          <div className=\"col\">\r\n            <h4 className=\"card-title\">Front</h4>\r\n            <p className=\"card-text\">{card.front}</p>\r\n          </div>\r\n          <div className=\"col\">\r\n            <h4 className=\"card-title\">Back</h4>\r\n            <p className=\"card-text\">{card.back}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper\">\r\n            <EditBtn cardId={card.id} deckId={deckId} type=\"card\" />\r\n            <DeleteBtn id={card.id} type=\"card\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CreateBtn({ deckId, type }) {\r\n  // if deck then display button for deck, otherwise display button for card\r\n  return type === \"deck\" ? (\r\n    <div className=\"text-right\">\r\n      <button\r\n        className=\"btn btn-secondary\"\r\n        style={{ width: \"12rem\" }}\r\n        type=\"button\"\r\n      >\r\n        <Link to=\"/decks/new\" className=\"text-white\">\r\n          Create Deck\r\n        </Link>\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <button\r\n      className=\"btn btn-primary mx-1\"\r\n      style={{ width: \"7rem\" }}\r\n      type=\"button\"\r\n    >\r\n      <Link to={`/decks/${deckId}/cards/new`} className=\"text-white\">\r\n        Add Cards\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function StudyBtn({ id }) {\r\n  return (\r\n    <button className=\"btn btn-primary mx-1\" style={{width: '7rem'}} type=\"button\">\r\n      <Link to={`/decks/${id}/study`} className=\"text-white\">\r\n        Study\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../../utils/api\";\r\nimport CardListItem from \"./CardListItem\";\r\nimport CreateBtn from \"../../common/buttons/CreateBtn\";\r\nimport DeleteBtn from \"../../common/buttons/DeleteBtn\";\r\nimport EditBtn from \"../../common/buttons/EditBtn\";\r\nimport ErrorMessage from \"../../common/ErrorMessage\";\r\nimport LoadingMessage from \"../../common/LoadingMessage\";\r\nimport NavBar from \"../../common/NavBar\";\r\nimport StudyBtn from \"../../common/buttons/StudyBtn\";\r\n\r\nexport default function ViewDeck({ deckId }) {\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([]);\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // get deck and cards from api every time the deckId changes\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readDeck(deckId, controller.signal)\r\n      .then(currentDeck => {\r\n        setDeck(currentDeck);\r\n        setCards(currentDeck.cards);\r\n      })\r\n      .catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [deckId]);\r\n\r\n  // create card for each card\r\n  const cardList = cards.map(card => (\r\n    <CardListItem card={card} deckId={deck.id} />\r\n  ));\r\n\r\n  // only display if there is a deck and cards and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !deck || !cards ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <>\r\n      <NavBar id={deck.id} navTitles={[deck.name]} />\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title\">{deck.name}</h3>\r\n          <p className=\"card-text\">{deck.description}</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper text-left\">\r\n            <EditBtn deckId={deck.id} type=\"deck\" />\r\n            <StudyBtn id={deck.id} />\r\n            <CreateBtn deckId={deck.id} type=\"card\" />\r\n            <DeleteBtn id={deck.id} type=\"deck\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2 className=\"mb-2 mt-4 ml-2\">Cards</h2>\r\n      <div className=\"row\">{cardList}</div>;\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { updateDeck, readDeck } from \"../../utils/api\";\r\nimport ErrorMessage from \"../common/ErrorMessage\";\r\nimport LoadingMessage from \"../common/LoadingMessage\";\r\nimport NavBar from \"../common/NavBar\";\r\n\r\nexport default function EditDeck({ deckId }) {\r\n  const [formData, setFormData] = useState({});\r\n  const [error, setError] = useState(undefined);\r\n  const history = useHistory();\r\n\r\n  // get deck from api and setFormData every time deckId changes\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readDeck(deckId, controller.signal).then(setFormData).catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [deckId]);\r\n\r\n  // update form when changed\r\n  const handleChange = ({ target }) => {\r\n    setFormData({ ...formData, [target.name]: target.value });\r\n  };\r\n\r\n  // update deck and navigate to deck page\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    updateDeck(formData).then(() => history.push(`/decks/${deckId}`));\r\n  };\r\n\r\n  // only display if there is formData and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !formData ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <>\r\n      <NavBar id={deckId} navTitles={[formData.name, \"Edit Deck\"]} />\r\n      <div className=\"container w-75\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              value={formData.name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              id=\"description\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"description\"\r\n              onChange={handleChange}\r\n              value={formData.description}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary m-2\"\r\n            onClick={() => history.push(\"/\")}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn-primary m-2\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport CreateBtn from '../../common/buttons/CreateBtn'\r\n\r\nexport default function LowCards({ numCards, deckId }) {\r\n    return (\r\n        <div className=\"container text-center\">\r\n            <h3>Not enough cards.</h3>\r\n            <p>You need at least 3 cards to study. There are {numCards} cards in this deck.</p>\r\n            <CreateBtn deckId={deckId} type=\"card\" />\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function StudyCard({ cards }) {\r\n  const initialState = { index: 0, flipped: false, viewed: false };\r\n  const [session, setSession] = useState({ ...initialState });\r\n  const history = useHistory();\r\n\r\n  // when pressed toggle flip state to change side and mark viewed\r\n  const handleFlip = event => {\r\n    setSession({\r\n      ...session,\r\n      flipped: !session.flipped,\r\n      viewed: true\r\n    });\r\n  };\r\n\r\n  // when pressed go to next card, if last card then reset\r\n  const handleNext = () => {\r\n    session.index < cards.length - 1\r\n      ? setSession({\r\n          ...session,\r\n          index: session.index + 1,\r\n          flipped: false,\r\n          viewed: false\r\n        })\r\n      : resetCards();\r\n  };\r\n\r\n  // confirm user would like to reset or go home\r\n  const resetCards = () => {\r\n    window.confirm(`Restart cards?\\n\\nClick \"cancel\" to return to the homepage`)\r\n      ? setSession(initialState)\r\n      : history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-deck justify-content-center text-center mt-4\">\r\n      <div className=\"w-75\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">\r\n              Card {session.index + 1} of {cards.length}\r\n            </h4>\r\n            <p className=\"card-text\">\r\n              {session.flipped\r\n                ? cards[session.index].back\r\n                : cards[session.index].front}\r\n            </p>\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <div className=\"btn-wrapper\">\r\n              <button className=\"btn btn-secondary mx-1 float-left\" style={{width: '5rem'}}onClick={handleFlip}>\r\n                Flip\r\n              </button>\r\n              {session.viewed && (\r\n                <button className=\"btn btn-primary mx-1 float-right\" style={{width: '5rem'}} onClick={handleNext}>\r\n                  Next\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../../utils/api\";\r\nimport ErrorMessage from \"../../common/ErrorMessage\";\r\nimport LoadingMessage from \"../../common/LoadingMessage\";\r\nimport LowCards from './LowCards'\r\nimport NavBar from \"../../common/NavBar\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nexport default function StudyDeck({ deckId }) {\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState();\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // get deck and cards from api every time the deckId changes\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    readDeck(deckId, controller.signal)\r\n      .then(currentDeck => {\r\n        setDeck(currentDeck);\r\n        setCards(currentDeck.cards);\r\n      })\r\n      .catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, [deckId]);\r\n\r\n  // only display if there is a deck and cards no error. if there are less than 3 cards display low cards\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !deck || !cards ? (\r\n    <LoadingMessage />\r\n  ) : cards.length < 3 ? (\r\n    <>\r\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\r\n      <LowCards numCards={cards.length} deckId={deckId} />\r\n    </>\r\n  ) : (\r\n    <>\r\n      <NavBar id={deckId} navTitles={[deck.name, \"Study\"]} />\r\n      <h2 className=\"text-center\">Study: {deck.name}</h2>\r\n      <StudyCard deckId={deckId} cards={cards} />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport CardCommands from \"./cards/index\";\r\nimport CardList from \"./view/CardList\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport StudyDeck from \"./study/StudyDeck\";\r\n\r\nexport default function DeckCommands() {\r\n  const {\r\n    url,\r\n    params: { deckId }\r\n  } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${url}/study`}>\r\n        <StudyDeck deckId={deckId} />\r\n      </Route>\r\n      <Route path={`${url}/edit`}>\r\n        <EditDeck deckId={deckId} />\r\n      </Route>\r\n      <Route path={`${url}/cards`}>\r\n        <CardCommands deckId={deckId} />\r\n      </Route>\r\n      <Route exact path={url}>\r\n        <CardList deckId={deckId} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ViewBtn({ id }) {\r\n  return (\r\n    <button className=\"btn btn-secondary mx-1\" style={{width: '7rem'}} type=\"button\">\r\n      <Link to={`/decks/${id}`} className=\"text-white\">\r\n        View\r\n      </Link>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport DeleteBtn from \"../common/buttons/DeleteBtn\";\r\nimport StudyBtn from \"../common/buttons/StudyBtn\";\r\nimport ViewBtn from \"../common/buttons/ViewBtn\";\r\n\r\nexport default function DeckListItem({ deck }) {\r\n  return (\r\n    <div className=\"col-6 d-flex align-items-stretch\">\r\n      <div className=\"card m-2\" key={deck.id}>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-subtitle mb-2 text-muted float-right\">\r\n            {deck.cards.length}\r\n          </h6>\r\n          <h5 className=\"card-title\">{deck.name}</h5>\r\n          <p className=\"card-text\">{deck.description}</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"btn-wrapper\">\r\n            <ViewBtn id={deck.id} />\r\n            <StudyBtn id={deck.id} />\r\n            <DeleteBtn id={deck.id} type=\"deck\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { listDecks } from \"../../utils/api\";\r\nimport CreateBtn from \"../common/buttons/CreateBtn\";\r\nimport DeckListItem from \"./DeckListItem\";\r\nimport ErrorMessage from \"../common/ErrorMessage\";\r\nimport LoadingMessage from \"../common/LoadingMessage\";\r\n\r\nexport default function DeckList() {\r\n  const [decks, setDecks] = useState([]);\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // get decks from api every time page loads\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    listDecks(controller.signal).then(setDecks).catch(setError);\r\n\r\n    return () => controller.abort();\r\n  }, []);\r\n\r\n  // create card for each deck\r\n  const list = decks.map(deck => <DeckListItem deck={deck} />);\r\n\r\n  // only display if there are decks and no error\r\n  return error ? (\r\n    <ErrorMessage error={error} />\r\n  ) : !decks ? (\r\n    <LoadingMessage />\r\n  ) : (\r\n    <main>\r\n      <CreateBtn type=\"deck\" />\r\n      <div className=\"row\">{list}</div>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport CreateDeck from \"./CreateDeck\";\nimport DeckCommands from \"../deck/index\";\nimport DeckList from \"./DeckList\";\nimport Header from \"../common/Header\";\nimport NotFound from \"../common/NotFound\";\n\nexport default function Home() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route exact path={`/decks/new`}>\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <DeckCommands />\n          </Route>\n          <NotFound />\n        </Switch>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/home/index\";\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}